---
import { LinkButton } from '@astrojs/starlight/components'
import { Code } from '@astrojs/starlight/components'

const { data } = Astro.locals.starlightRoute.entry
const { title = data.title, tagline, actions = [] } = data.hero || {}
---

<div class="hero">
    <div class="hero-html sl-flex">
        <div>
            <canvas id="gauge1"></canvas>
            <input class="w-full" id="rangeSlider" type="range" min="0" max="100" size="100" step="0.01" />
            <script>
                import { createHomeGauge } from '../scripts/gaugeUtils'
                import throttle from 'throttleit'
                import Hammer from 'hammerjs'
                const GAUGE_VALUE = 80

                let gauge = createHomeGauge({
                    canvasElement: document.querySelector('#gauge1') as HTMLCanvasElement,
                    value: GAUGE_VALUE,
                    colorSelectors: [
                        { min: 0, max: 14.28, color: '#6e40aa' },
                        { min: 14.28, max: 28.56, color: '#ee4395' },
                        { min: 28.56, max: 42.84, color: '#ff8c38' },
                        { min: 42.84, max: 57.12, color: '#aff05b' },
                        { min: 57.12, max: 71.4, color: '#28ea8d' },
                        { min: 71.4, max: 85.68, color: '#2f96e0' },
                        { min: 85.68, max: 100, color: '#6e40aa' },
                    ],
                    lightTheme: {
                        backgroundArcColor: '#EEE',
                        counter: { color: '#222' },
                        labels: { color: '#333' },
                    },
                    darkTheme: {
                        backgroundArcColor: '#EEE',
                        counter: { color: '#EEE' },
                        labels: { color: '#BDBDBD' },
                    },
                })

                let slider = document.querySelector('#rangeSlider') as HTMLInputElement
                slider.value = GAUGE_VALUE.toString()
                slider?.addEventListener(
                    'input',
                    throttle(() => {
                        let newGaugeValue = Math.round(Number.parseFloat(slider?.value) * 100) / 100
                        gauge.animateTo(newGaugeValue)
                    }, 51)
                )

                let hammerSlider = new Hammer(slider)
                hammerSlider.on('panstart', () => {
                    gauge.updateProps({ animation: { duration: 300 } })
                })
                hammerSlider.on('panend', () => {
                    gauge.updateProps({ animation: { duration: 750 } })
                })
            </script>
        </div>
    </div>
    <div class="sl-flex stack">
        <div class="sl-flex copy">
            <h1 id={'landing-title'} data-page-title set:html={title} />
            {tagline && <div class="tagline" set:html={tagline} />}
            {
                tagline && (
                    <div class="block text-left">
                        <Code
                            code={`
import Gauge from '@fun-gauge/react'

function MyGauge() {
    return <Gauge value={80} />
}`}
                            lang="js"
                        />
                    </div>
                )
            }
        </div>
        {
            actions.length > 0 && (
                <div class="sl-flex actions">
                    {actions.map(({ attrs: { class: className, ...attrs } = {}, icon, link: href, text, variant }) => (
                        <LinkButton {href} {variant} icon={icon?.name} class:list={[className]} {...attrs}>
                            {text}
                            {icon?.html && <Fragment set:html={icon.html} />}
                        </LinkButton>
                    ))}
                </div>
            )
        }
    </div>
</div>

<style>
   
    @layer starlight.core {
        .hero {
            display: grid;
            align-items: center;
            gap: 1rem;
            padding-bottom: 1rem;
        }

        .hero > img,
        .hero > .hero-html {
            /* object-fit: contain; */
            overflow: hidden;
            /* width: min(70%, 20rem); */
            width: 90%;
            max-width: 100%;
            height: auto;
            margin-inline: auto;
        }

        .stack {
            flex-direction: column;
            gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
            text-align: center;
        }

        .copy {
            flex-direction: column;
            gap: 1rem;
            align-items: center;
        }

        .copy > * {
            max-width: 50ch;
        }

        h1 {
            font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 5vw), var(--sl-text-6xl));
            line-height: var(--sl-line-height-headings);
            font-weight: 600;
            color: var(--sl-color-white);
        }

        .tagline {
            font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
            color: var(--sl-color-gray-2);
        }

        .actions {
            gap: 1rem 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        @media (min-width: 50rem) {
            .hero {
                grid-template-columns: 7fr 4fr;
                gap: 3%;
                padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
            }

            .hero > img,
            .hero > .hero-html {
                order: 2;
                width: min(100%, 30em);
                /* width: 80%; */
            }

            .stack {
                text-align: start;
            }

            .copy {
                align-items: flex-start;
            }

            .actions {
                justify-content: flex-start;
            }
        }
    }
</style>
